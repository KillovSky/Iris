{
    "name": "Watch",
    "description": "Sistema que monitora e recarrega os códigos em tempo real.",
    "usage": {
        "general": "[RESTRITO] - Verifique o 'examples' para usos inseguros.",
        "examples": [
            "Watch.env()",
            "Watch.init('LOCAL/OPCIONAL')",
            "await Watch.stop('LOCAL/OPCIONAL')",
            "Watch.stop('LOCAL/OPCIONAL').then((res) => 'Returns Boolean, create code here...')",
            "Watch.reset()",
            "Watch.env().functions.revert.value()",
            "Watch.env().functions.init('LOCAL/OPCIONAL')",
            "await Watch.env().functions.stop('LOCAL/OPCIONAL')",
            "Watch.env().functions.stop('LOCAL/OPCIONAL').then((res) => 'Returns Boolean, create code here...')"
        ]
    },
    "license": "MIT",
    "helps": [
        "Você pode mudar os parâmetros da exports enviando o valor da Object que deseja editar ao resetar, por exemplo → Watch.reset({ name: 'Body'}) ← Isso mudaria o module de Tree para Body, o uso então passaria ser: → Body.funcão ← Isso também permite que você edita a função usando o mesmo método.",
        "Você pode mudar o que os códigos rodam, em tempo real, basta usar a 'env', por exemplo → Watch.env().name = 'Body' ← Mas este método não atualizará o sistema, somente a Object, os sistemas permanecem intactos.",
        "Você pode configurar o tempo de reset dos resultados ou se eles devem ser resetados usando a env, por exemplo → Watch.env().settings.wait = 10000 ← Isso mudaria o tempo de espera para 10 segundos, o tempo deve ser em milissegundos.",
        "Alguém lê essas dicas? Se sim, torne-se um programador, ler os tutoriais é de suma importância e poucos desenvolvedores o fazem...",
        "Caso você utilize um local modificado, não esqueça de editar a 'parameters.ignore', pois senão os módulos serão recarregados juntos, e isso terá consequências graves, portanto, não se esqueça ou não mexa."
    ],
    "exports": {
        "env": "env",
        "watcher": "init",
        "messedup": "messedup",
        "stopwatch": "stop",
        "reset": "reset"
    },
    "developer": "KillovSky",
    "files": {
        "utils.json": "Dados de fábrica da envInfo.",
        "index.js": "Sistema que recarrega os arquivos de código para atualização em tempo real."
    },
    "modules": {
        "fs": "Leitura de diretórios e arquivos.",
        "path": "Corrige os diretórios adequadamente.",
        "chokidar": "Monitora recursivamente os arquivos."
    },
    "functions": {
        "stopwatch": {
            "arguments": false,
            "description": "Faz o close do monitoramento de arquivos.",
            "type": "Boolean / Function",
            "value": false
        },
        "messedup": {
            "arguments": {
                "error": {
                    "description": "Instância de erro para formatação.",
                    "type": "Boolean / Error",
                    "value": false
                }
            },
            "description": "Retorna as variáveis e sistemas do arquivo.",
            "type": "Boolean / Function",
            "value": false
        },
        "ambient": {
            "arguments": false,
            "description": "Retorna as variáveis e sistemas do arquivo.",
            "type": "Boolean / Function",
            "value": false
        },
        "watcher": {
            "arguments": false,
            "description": "Monitora e recarrega arquivos que foram usados no require.",
            "type": "Boolean / Function",
            "value": false
        },
        "revert": {
            "arguments": {
                "changeKey": {
                    "description": "Uma Object com valores que existem na envInfo, ela será usada para substituir o sistema em tempo real.",
                    "type": "Object value",
                    "anyValue": false
                }
            },
            "description": "Reseta a envInfo para a Object padrão.",
            "type": "Boolean / Function",
            "value": false
        }
    },
    "settings": {
        "enabling": {
            "description": "Determina se deve deletar o require cache, que é o objetivo desse módulo existir.",
            "type": "Boolean",
            "value": true
        },
        "error": {
            "description": "Define se pode printar qualquer erro.",
            "type": "Boolean",
            "value": false
        },
        "ignore": {
            "description": "Define os arquivos a ignorar no recarregamento.",
            "type": "Array",
            "value": [
                "**/node_modules/**/*",
                "**/.git/**/*",
                "**/lib/Initialize**",
                "**/lib/Sessions**",
                "**/lib/Functions/Reload**",
                "**/lib/Functions/Listener**"
            ]
        },
        "logconsole": {
            "description": "Determina se deve exibir os alertas de edição.",
            "type": "Boolean",
            "value": true
        },
        "monitore": {
            "description": "Local padrão para verificação.",
            "type": "String",
            "value": "./lib"
        }
    },
    "parameters": {
        "already": {
            "description": "Arquivos ou pastas que já estão no monitoramento.",
            "type": "Boolean / Array",
            "value": false
        },
        "choks": {
            "description": "Monitoramentos em execução.",
            "type": "Boolean / Object function",
            "value": false
        },
        "code": {
            "description": "Código do erro que obter.",
            "type": "Boolean / String / Number",
            "value": false
        },
        "location": {
            "description": "Local onde o módulo pode ser encontrado.",
            "type": "Boolean / String",
            "value": false
        },
        "message": {
            "description": "Armazena a mensagem do último erro recebido.",
            "type": "Boolean / String",
            "value": false
        }
    },
    "results": {
        "description": "Resultado final da função.",
        "success": false,
        "type": "Boolean / String",
        "value": false
    }
}