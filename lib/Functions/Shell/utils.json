{
    "name": "Bash",
    "description": "Funções que rodam códigos referentes ao terminal do computador.",
    "usage": {
        "general": "[RESTRITO] - Verifique o 'examples' para usos inseguros.",
        "examples": [
            "Bash.env()",
            "Bash.liner('quantity', 'file')",
            "Bash.dial('name', 'language', 'subdialogue', 'function', 'index/boolean')",
            "Bash.reset()",
            "Bash.env().functions.liner.value('quantity', 'file')",
            "Bash.env().functions.dial.value('name', 'language', 'subdialogue', 'function', 'index/boolean')",
            "Bash.env().functions.revert.value()"
        ]
    },
    "license": "MIT",
    "helps": [
        "Você pode mudar os parâmetros da exports enviando o valor da Object que deseja editar ao resetar, por exemplo → Bash.reset({ name: 'Body'}) ← Isso mudaria o module de Tree para Body, o uso então passaria ser: → Body.funcão ← Isso também permite que você edita a função usando o mesmo método.",
        "Você pode mudar o que os códigos rodam, em tempo real, basta usar a 'env', por exemplo → Bash.env().name = 'Body' ← Mas este método não atualizará o sistema, somente a Object, os sistemas permanecem intactos.",
        "Você pode configurar o tempo de reset dos resultados ou se eles devem ser resetados usando a env, por exemplo → Bash.env().settings.wait = 10000 ← Isso mudaria o tempo de espera para 10 segundos, o tempo deve ser em milissegundos.",
        "Alguém lê essas dicas? Se sim, torne-se um programador, ler os tutoriais é de suma importância e poucos desenvolvedores o fazem...",
        "Existem infinitas formas de uso secretas, explore os códigos para descobrir os mistérios dos sistemas!",
        "Todas as funções tem valores padrão, então você não sofrerá erros por esquecer de enviar um parâmetro ou similar.",
        "O parse de JSON's é feito usando o comando JQ do Linux, graças a esse parse, o JSON nunca será carregado na memoria do NodeJS.",
        "Embora essas funções executem comandos que não são do NodeJS, elas estão armazenadas em arquivos shellscript, para evitar que más usos possam ser ruins e causar danos."
    ],
    "exports": {
        "env": "env",
        "messedup": "messedup",
        "liner": "liner",
        "dial": "dial",
        "bash": "bash",
        "reset": "reset",
        "poswork": "finish"
    },
    "developer": "KillovSky",
    "files": {
        "index.js": "Sistema que contém funções de código externo, como Python ou Bash.",
        "utils.json": "Dados de fábrica da envInfo."
    },
    "modules": {
        "fs": "Leitura de diretórios e arquivos.",
        "path": "Para obter o nome da pasta.",
        "child": "Para executar comandos de terminal."
    },
    "functions": {
        "ambient": {
            "arguments": false,
            "description": "Retorna as variáveis e sistemas do arquivo.",
            "type": "Boolean / Function",
            "value": false
        },
        "messedup": {
            "arguments": {
                "error": {
                    "description": "Instância de erro para formatação.",
                    "type": "Boolean / Error",
                    "value": false
                }
            },
            "description": "Ajusta os valores de erro.",
            "type": "Boolean / Function",
            "value": false
        },
        "dial": {
            "arguments": {
                "textDial": {
                    "description": "Nome do dialogo a obter.",
                    "type": "String",
                    "value": "Backups"
                },
                "dialLang": {
                    "description": "Idioma do dialogo a obter.",
                    "type": "String",
                    "value": "pt"
                },
                "textType": {
                    "description": "Tipo de sub-dialogo para adquirir.",
                    "type": "String",
                    "value": "Default"
                },
                "funcType": {
                    "description": "Tipo de função usada para obter os diálogos.",
                    "type": "String",
                    "value": "randomize"
                },
                "dialSize": {
                    "description": "Determina o index da Array de diálogos ou se deve retornar um valor único.",
                    "type": "Number / Boolean",
                    "value": true
                }
            },
            "description": "Faz parse dos JSON's de dialogo via Bash.",
            "type": "Boolean / Function",
            "value": false
        },
        "liner": {
            "arguments": {
                "linesGet": {
                    "description": "Quantidade de linhas a adquirir.",
                    "type": "Number",
                    "value": 1
                },
                "fileTexts": {
                    "description": "Arquivo que deve utilizar para obter textos.",
                    "type": "String",
                    "value": "./lib/Texts/curiosidades.txt"
                }
            },
            "description": "Adquire uma linha aleatória de um arquivo de texto via Bash.",
            "type": "Boolean / Function",
            "value": false
        },
        "bash": {
            "arguments": {
                "termComma": {
                    "description": "Comando a ser executado.",
                    "type": "String",
                    "value": "echo 'No command has sended, insert something to run.'"
                }
            },
            "description": "Função que roda um comando no bash.",
            "type": "Boolean / Function",
            "value": false
        },
        "poswork": {
            "arguments": {
                "response": {
                    "description": "Resultados de uma função.",
                    "type": "Any",
                    "value": false
                }
            },
            "description": "Verifica se pode resetar a envInfo e retorna o resultado da função.",
            "type": "Boolean / Function",
            "value": false
        },
        "revert": {
            "arguments": {
                "changeKey": {
                    "description": "Uma Object com valores que existem na envInfo, ela será usada para substituir o sistema em tempo real.",
                    "type": "Object value",
                    "anyValue": false
                }
            },
            "description": "Reseta a envInfo para a Object padrão.",
            "type": "Boolean / Function",
            "value": false
        }
    },
    "settings": {
        "wait": {
            "description": "Tempo em MS que deve esperar antes de resetar.",
            "type": "Number",
            "value": 5000
        },
        "error": {
            "description": "Define se pode printar qualquer erro.",
            "type": "Boolean",
            "value": false
        },
        "ender": {
            "description": "Define se deve resetar a cada erro.",
            "type": "Boolean",
            "value": true
        },
        "finish": {
            "description": "Define se deve resetar a cada finalização.",
            "type": "Boolean",
            "value": true
        }
    },
    "parameters": {
        "location": {
            "description": "Local onde o módulo pode ser encontrado.",
            "type": "Boolean / String",
            "value": "./index"
        },
        "code": {
            "description": "Código do erro que obter.",
            "type": "Boolean / String / Number",
            "value": false
        },
        "message": {
            "description": "Armazena a mensagem do último erro recebido.",
            "type": "Boolean / String",
            "value": false
        }
    },
    "results": {
        "description": "Resultado final da função.",
        "success": true,
        "type": "Any",
        "value": false
    }
}